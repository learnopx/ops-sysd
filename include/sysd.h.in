/************************************************************************//**
 * (c) Copyright 2015 Hewlett Packard Enterprise Development LP
 *
 *    Licensed under the Apache License, Version 2.0 (the "License"); you may
 *    not use this file except in compliance with the License. You may obtain
 *    a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *    License for the specific language governing permissions and limitations
 *    under the License.
 *
 ***************************************************************************/

/*
 * @defgroup ops-sysd OpenSwitch system daemon
 *
 * @brief OpenSwitch system daemon (ops-sysd)
 *
 * The ops-sysd daemon is responsible for detecting the presense of supported
 * subsystems on the switch platform and populating OVSDB.
 * This deamon's primary responsibilities include:
 *     - process the manifest file to populate platform specific information
 *       into the database.
 *     - parse hardware desciption files for the given OpenSwitch platform.
 *     - detect subsystems and validate against hardware description files.
 *     - populate OVSDB interface table based on detected physical interfaces.
 *     - orchestrate daemon startup for daemons that interact with hardware.
 *
 * @{
 *
 * @file
 * Header for ops-sysd daemon
 *
 * @defgroup sysd_public Public Interface
 * The ops-sysd platform daemon manages the physical subsystems and physical
 * interfaces on the OpenSwitch platform.
 *
 * @{
 *
 * Public APIs
 *
 * Command line options:
 *
 *     ops-sysd: OpenSwitch system daemon
 *     usage: ops-sysd [OPTIONS] [DATABASE]
 *     where DATABASE is a socket on which ovsdb-server is listening
 *           (default: "unix:/var/run/openvswitch/db.sock").
 *
 *      Daemon options:
 *        --detach                run in background as daemon
 *        --no-chdir              do not chdir to '/'
 *        --pidfile[=FILE]        create pidfile (default: /var/run/openvswitch/ops-sysd.pid)
 *        --overwrite-pidfile     with --pidfile, start even if already running
 *
 *      Logging options:
 *        -vSPEC, --verbose=SPEC   set logging levels
 *        -v, --verbose            set maximum verbosity level
 *        --log-file[=FILE]        enable logging to specified FILE
 *                                 (default: /var/log/openvswitch/ops-sysd.log)
 *        --syslog-target=HOST:PORT  also send syslog msgs to HOST:PORT via UDP
 *
 *      Other options:
 *        --unixctl=SOCKET        override default control socket name
 *        -h, --help              display this help message
 *
 *
 * Available ovs-apptcl command options are:
 *
 *      coverage/show
 *      exit
 *      list-commands
 *      version
 *      ops-sysd/dump      dumps daemons internal data for debugging.
 *      vlog/disable-rate-limit [module]...
 *      vlog/enable-rate-limit  [module]...
 *      vlog/list
 *      vlog/reopen
 *      vlog/set                {spec | PATTERN:destination:pattern}
 *
 *
 * OVSDB elements usage
 *
 *  The following table rows are CREATED by ops-sysd:
 *
 *      Interface row
 *      Subsystem row
 *
 *  The following columns are WRITTEN by ops-sysd:
 *
 *      System:subsystems
 *      System:cur_hw
 *      System:next_hw
 *
 *      Subsystem:name, asset_tag_number, hw_desc_dir, other_config, interfaces
 *
 *      Interface:name, hw_intf_info
 *
 *      Daemon: name, cur_hw, is_hw_handler
 *
 * Linux Files:
 *
 *  The following files are written by ops-sysd:
 *
 *      /var/run/openvswitch/ops-sysd.pid: Process ID for the ops-sysd daemon
 *      /var/run/openvswitch/ops-sysd.<pid>.ctl: Control file for ovs-appctl
 *
 ***************************************************************************/
/** @} end of group sysd_public */

#ifndef __SYSD_H__
#define __SYSD_H__

#cmakedefine PLATFORM_SIMULATION
#cmakedefine USE_SW_FRU

#include <stdint.h>
#include "sysd_fru.h"

#define DFLT_ASSET_TAG             "OpenSwitch asset tag"
#define DFLT_TIMEZONE              "UTC"
#define BASE_SUBSYSTEM             "base"
#define SYSD_BASE_SUBSYSTEM        "base"

#define SYSD_SUBSYSTEM_TYPE_UNINIT      "uninitialized"
#define SYSD_SUBSYSTEM_TYPE_MEZZ        "mezz_card"
#define SYSD_SUBSYSTEM_TYPE_LINE        "line_card"
#define SYSD_SUBSYSTEM_TYPE_CHASSIS     "chassis"
#define SYSD_SUBSYSTEM_TYPE_SYSTEM      "system"

#ifdef PLATFORM_SIMULATION
#define GENERIC_X86_MANUFACTURER        "Generic-x86"
#define GENERIC_X86_PRODUCT_NAME        "X86-64"
#endif

/**
 * Max supported split ports on QSFP ports.
 */
/* OPS_TODO This MACRO should go to a common header file. */
#define SYSD_MAX_SPLIT_PORTS      4

#define MAX_SUBSYSTEM_NAME_LEN    512

typedef YamlPortInfo sysd_intf_cmn_info_t;
typedef YamlPort     sysd_intf_info_t;

/*************************************************************************//**
 * ops-sysd's internal data structure to store per subsytem data.
 ****************************************************************************/
typedef struct subsystem {
    char                    name[MAX_SUBSYSTEM_NAME_LEN];
    const char              *type;
    bool                    valid;
    int                     intf_count;         /*!< Total number of interfaces. */
    sysd_intf_cmn_info_t    *intf_cmn_info;     /*!< Global info about interfaces. */
    sysd_intf_info_t        **interfaces;       /*!< Per interface info. */

    fru_eeprom_t            fru_eeprom;

    uint64_t                nxt_mac_addr;       /*!< Next avaliable MAC addr */
    int                     num_free_macs;
    uint64_t                mgmt_mac_addr;      /*!< MAC addr for mgmt i/f */
    uint64_t                system_mac_addr;    /*!< MAC addr for system, as a uint64 */
} sysd_subsystem_t;

extern struct ovsdb_idl  *idl;
extern uint32_t          idl_seqno;
extern int               num_subsystems;
extern sysd_subsystem_t  **subsystems;

#endif /* __SYSD_H__ */

/** @} end of group ops-sysd */
